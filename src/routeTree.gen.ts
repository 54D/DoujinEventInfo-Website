/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as EventsIndexImport } from './routes/events/index'
import { Route as EventsEventIdRouteImport } from './routes/events/$eventId/route'
import { Route as EventsEventIdDetailsIndexImport } from './routes/events/$eventId/details/index'
import { Route as EventsEventIdBoothsIndexImport } from './routes/events/$eventId/booths/index'
import { Route as EventsEventIdBoothsBoothIdIndexImport } from './routes/events/$eventId/booths/$boothId/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EventsIndexRoute = EventsIndexImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdRouteRoute = EventsEventIdRouteImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdDetailsIndexRoute = EventsEventIdDetailsIndexImport.update({
  id: '/details/',
  path: '/details/',
  getParentRoute: () => EventsEventIdRouteRoute,
} as any)

const EventsEventIdBoothsIndexRoute = EventsEventIdBoothsIndexImport.update({
  id: '/booths/',
  path: '/booths/',
  getParentRoute: () => EventsEventIdRouteRoute,
} as any)

const EventsEventIdBoothsBoothIdIndexRoute =
  EventsEventIdBoothsBoothIdIndexImport.update({
    id: '/booths/$boothId/',
    path: '/booths/$boothId/',
    getParentRoute: () => EventsEventIdRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId/booths/': {
      id: '/events/$eventId/booths/'
      path: '/booths'
      fullPath: '/events/$eventId/booths'
      preLoaderRoute: typeof EventsEventIdBoothsIndexImport
      parentRoute: typeof EventsEventIdRouteImport
    }
    '/events/$eventId/details/': {
      id: '/events/$eventId/details/'
      path: '/details'
      fullPath: '/events/$eventId/details'
      preLoaderRoute: typeof EventsEventIdDetailsIndexImport
      parentRoute: typeof EventsEventIdRouteImport
    }
    '/events/$eventId/booths/$boothId/': {
      id: '/events/$eventId/booths/$boothId/'
      path: '/booths/$boothId'
      fullPath: '/events/$eventId/booths/$boothId'
      preLoaderRoute: typeof EventsEventIdBoothsBoothIdIndexImport
      parentRoute: typeof EventsEventIdRouteImport
    }
  }
}

// Create and export the route tree

interface EventsEventIdRouteRouteChildren {
  EventsEventIdBoothsIndexRoute: typeof EventsEventIdBoothsIndexRoute
  EventsEventIdDetailsIndexRoute: typeof EventsEventIdDetailsIndexRoute
  EventsEventIdBoothsBoothIdIndexRoute: typeof EventsEventIdBoothsBoothIdIndexRoute
}

const EventsEventIdRouteRouteChildren: EventsEventIdRouteRouteChildren = {
  EventsEventIdBoothsIndexRoute: EventsEventIdBoothsIndexRoute,
  EventsEventIdDetailsIndexRoute: EventsEventIdDetailsIndexRoute,
  EventsEventIdBoothsBoothIdIndexRoute: EventsEventIdBoothsBoothIdIndexRoute,
}

const EventsEventIdRouteRouteWithChildren =
  EventsEventIdRouteRoute._addFileChildren(EventsEventIdRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdRouteRouteWithChildren
  '/events': typeof EventsIndexRoute
  '/events/$eventId/booths': typeof EventsEventIdBoothsIndexRoute
  '/events/$eventId/details': typeof EventsEventIdDetailsIndexRoute
  '/events/$eventId/booths/$boothId': typeof EventsEventIdBoothsBoothIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdRouteRouteWithChildren
  '/events': typeof EventsIndexRoute
  '/events/$eventId/booths': typeof EventsEventIdBoothsIndexRoute
  '/events/$eventId/details': typeof EventsEventIdDetailsIndexRoute
  '/events/$eventId/booths/$boothId': typeof EventsEventIdBoothsBoothIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdRouteRouteWithChildren
  '/events/': typeof EventsIndexRoute
  '/events/$eventId/booths/': typeof EventsEventIdBoothsIndexRoute
  '/events/$eventId/details/': typeof EventsEventIdDetailsIndexRoute
  '/events/$eventId/booths/$boothId/': typeof EventsEventIdBoothsBoothIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/events/$eventId'
    | '/events'
    | '/events/$eventId/booths'
    | '/events/$eventId/details'
    | '/events/$eventId/booths/$boothId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/events/$eventId'
    | '/events'
    | '/events/$eventId/booths'
    | '/events/$eventId/details'
    | '/events/$eventId/booths/$boothId'
  id:
    | '__root__'
    | '/'
    | '/events/$eventId'
    | '/events/'
    | '/events/$eventId/booths/'
    | '/events/$eventId/details/'
    | '/events/$eventId/booths/$boothId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EventsEventIdRouteRoute: typeof EventsEventIdRouteRouteWithChildren
  EventsIndexRoute: typeof EventsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EventsEventIdRouteRoute: EventsEventIdRouteRouteWithChildren,
  EventsIndexRoute: EventsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/events/$eventId",
        "/events/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/events/$eventId": {
      "filePath": "events/$eventId/route.tsx",
      "children": [
        "/events/$eventId/booths/",
        "/events/$eventId/details/",
        "/events/$eventId/booths/$boothId/"
      ]
    },
    "/events/": {
      "filePath": "events/index.tsx"
    },
    "/events/$eventId/booths/": {
      "filePath": "events/$eventId/booths/index.tsx",
      "parent": "/events/$eventId"
    },
    "/events/$eventId/details/": {
      "filePath": "events/$eventId/details/index.tsx",
      "parent": "/events/$eventId"
    },
    "/events/$eventId/booths/$boothId/": {
      "filePath": "events/$eventId/booths/$boothId/index.tsx",
      "parent": "/events/$eventId"
    }
  }
}
ROUTE_MANIFEST_END */
